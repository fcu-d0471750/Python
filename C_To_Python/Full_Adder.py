'''
全加器
Full Adder
'''
#=================================================================================
#宣告變數
#=================================================================================
#int: 相加結果
Sum = 0
#int: 輸入1
Input_1 = 0
#int: 輸入2
Input_2 = 0
#int: 儲存進位
C = 0

#=================================================================================
#宣告方法
#=================================================================================
#==============================
#方法: 轉換二進制
#==============================
def Binary(Input):
    #暫存1個位元
    Bit = 0

    #如果Input_1 + Input_2 <= 65535 , 有16位元
    if(Input <= 65535):
        #因為要算16位,所以建立一個執行16次的迴圈
        for i in range(1,17,1):
            Bit = (Input >> (16-i)) & 1
            print(Bit,end='')
            #每4個位元，印1個空格
            if(i%4==0):print(' ',end='')
    #如果Input_1 + Input_2 > 65535 , 有17位元
    else:
        #因為要算17位,所以建立一個執行17次的迴圈
        for i in range(1,18,1):
            Bit = (Input >> (17-i)) & 1
            print(Bit, end='')
            # 每4個位元，印1個空格
            if (i % 4 == 0): print(' ',end='')

    print()

#==============================
#方法: 全加器(Input_1=輸入第一個整數  , Input_2=輸入第二個整數  , ci=進位輸入 , now=執行到第幾個位元 )
#==============================
def F_Adder(Input_1 , Input_2 , ci , now):
    #S=2個位元相加的和
    S = 0
    #CO = 進位
    CO = 0

    #S的邏輯函數
    S = Input_1 ^ Input_2 ^ ci
    #CO的邏輯函數
    CO = (Input_1 & Input_2) | (Input_2 & ci) | (ci & Input_1)


    #由於是要使用外部的Sum，需要宣告為global，告知是要使用外部的Sum
    global Sum
    # 每執行一次,Sum的值都向左移動一位元，用於計算下1個位元
    Sum = (S << now) | Sum

    #回傳進位
    return  CO

#=================================================================================
#(執行)
#=================================================================================

#==============================
#輸入整數
#==============================
Input_1 = eval(input('Number 1: '))
Input_2 = eval(input('Number 2: '))


#==============================
#全加器執行
#==============================

#如果Input_1 + Input_2 <= 65535 , 有16位元
if(Input_1 + Input_2 <= 65535):
    #因為要算16位,所以建立一個執行16次的迴圈
    for i in range(0,16,1):
        #如果是個位
        if(i==0):
            #C=是否進位(靠add計算)  將Input_1的個位,Input_2的個位,C接地,計算第0位當參數輸入給add
            C = F_Adder((Input_1 & 1) , (Input_2 & 1) , 0 , 0)
        else:
            #C=是否進位(靠add計算)  將Input_1的i位,Input_2的i位,上次算出來的c,計算第i位當參數輸入給add
            C = F_Adder( ((Input_1 >> i) & 1) , ((Input_2 >> i) & 1) , C , i)

#如果Input_1 + Input_2 > 65535 , 有17位元
else:
    #因為要算17位,所以建立一個執行17次的迴圈
    for i in range(0,17,1):
        #如果是個位
        if (i == 0):
            #C=是否進位(靠add計算)  將Input_1的個位,Input_2的個位,C接地,計算第0位當參數輸入給add
            C = F_Adder((Input_1 & 1), (Input_2 & 1), 0, 0)
        else:
            #C=是否進位(靠add計算)  將Input_1的i位,Input_2的i位,上次算出來的c,計算第i位當參數輸入給add
            C = F_Adder(((Input_1 >> i) & 1), ((Input_2 >> i) & 1), C, i)

#==============================
#印出
#==============================
print(Input_1)
Binary(Input_1)

print(Input_2)
Binary(Input_2)

print(Sum)
Binary(Sum)


